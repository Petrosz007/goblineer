<?php
ini_set('mysql.connect_timeout', 1000);
ini_set('default_socket_timeout', 1000); 

require_once __DIR__ . "/cron_includes.php";
require_once __DIR__ . "/cron_mv_all.php";

global $conn, $clientId, $clientSecret, $realmRegion, $realmName;

// Getting the oauth token
$oauthToken = getOAuthToken($clientId, $clientSecret);
echo "Got the OAuth Access token\n";


// Getting the time of the last update
function getLastUpdateMilliseconds() {
    global $conn;

    $lastUpdateSql="SELECT realm from status WHERE id IN (SELECT MAX(id) FROM status)";
    $lastUpdateResult = mysqli_query($conn, $lastUpdateSql);

    $lastUpdateResultData = $lastUpdateResult->fetch_assoc();
    if ($lastUpdateResultData) {
        return $lastUpdateResultData['realm'] . '000';
    }

    return 0;
}

$lastUpdate = getLastUpdateMilliseconds();

// Checking if the auctions table is empty
$checkEmptyResult = mysqli_query($conn, "SELECT * FROM auctions");
$isEmpty = mysqli_num_rows($checkEmptyResult) == 0;

$force = isset($argv) ? $argv[1] == 'force' : false;
if($force){
    echo "Forcing update.". PHP_EOL;
    $lastUpdate = "";
}
else if($isEmpty) {
    echo "No auctions in db, running update...".PHP_EOL;
    $lastUpdate = "";
}


// Getting the auctions
$connectedRealmRaw = getRequest('https://'.$realmRegion.'.api.blizzard.com/data/wow/realm/'.$realmName.'?namespace=dynamic-'
.$realmRegion.'&locale=en_US&access_token='.$oauthToken);
$realmHref = json_decode($connectedRealmRaw, true)["connected_realm"]["href"];
//$matches; // I have no idea what this var was supposed to do
preg_match('/connected-realm\/(\d+)\?/', $realmHref, $matches);
$realmId = $matches[1];

$auctionsUrl = 'https://'.$realmRegion.'.api.blizzard.com/data/wow/connected-realm/'.$realmId.'/auctions?namespace=dynamic-'.$realmRegion.
'&locale=en_GB&access_token='.$oauthToken;

$response = getAuctionsRequest($auctionsUrl, $lastUpdate);

$responseObject = json_decode($response, true);
echo "Got the API json data.\n";

// TODO: This doesn't work yet, somehow it always updates
if($responseObject == null) {
    echo "No need for update".PHP_EOL;
    exit();
}
else {
    $apiLastUpdate = getLastUpdateFromHeader($auctionsUrl);
    $sql = "INSERT INTO status (realm) VALUES('".$apiLastUpdate."');";
    var_dump($sql);
    mysqli_query($conn, $sql);

    writeData($conn, $responseObject);
    exit();
}

function getOAuthToken($clientId, $clientSecret) {
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    //Getting the OAuth token
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, "https://us.battle.net/oauth/token");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_USERPWD, $clientId.':'.$clientSecret);

    $headers = array();
    $headers[] = "Content-Type: application/x-www-form-urlencoded";
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $oauthToken = json_decode(curl_exec($ch), true)["access_token"];
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close ($ch);

    return $oauthToken;
}

function getRequest($url) {
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");


    $headers = array();
    $headers[] = "Accept: application/json";
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $response = curl_exec($ch);
    if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
    }
    curl_close ($ch);

    return $response;
}

function getAuctionsRequest($url, $date) {
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");


    $headers = array('Accept: application/json', 'If-Modified-Since: '.$date);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $response = curl_exec($ch);
    if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
    }
    curl_close ($ch);

    return $response;
}

function getLastUpdateFromHeader($url) {
    $headers = get_headers($url, 1);
    $lastUpdateString = $headers['Last-Modified'];

    return strtotime($lastUpdateString);
}

function writeData($conn, $responseObject){

	$last_updated_unix_row = mysqli_fetch_assoc(mysqli_query($conn, "SELECT MAX(realm) FROM status"));
	$last_updated_unix = $last_updated_unix_row["MAX(realm)"];
	/*Archiving previous data*/
	$historicalSql = "INSERT INTO historical(item, marketvalue, quantity, date) SELECT item, marketvalue, quantity, ".$last_updated_unix." FROM marketvalue";
	mysqli_query($conn, $historicalSql);

    $auctionsArray = $responseObject["auctions"];

   mysqli_query($conn, "TRUNCATE TABLE auctions");
   mysqli_query($conn, "TRUNCATE TABLE marketvalue");
   mysqli_query($conn, "TRUNCATE TABLE blood");

   $sql = "INSERT INTO auctions (auc, item, buyout, quantity) VALUES ";
   $i = 0;
   $counter = 0;

    foreach ($auctionsArray as $auction) {
        // Stackable items
        if(array_key_exists('unit_price', $auction)) {
            $sql = $sql . " (". $auction['id'].",". $auction['item']['id'].",".($auction['unit_price']/100).",".$auction['quantity']."),";
        }
        // Battle pets, BOEs, ...
        else if(array_key_exists('buyout', $auction)) {
            $sql = $sql . " (". $auction['id'].",". $auction['item']['id'].",".($auction['buyout']/100).",".$auction['quantity']."),";
        } else {
            // This item only has a bid price, ignore it
        }


        ++$i;
        ++$counter;
        if($i == 5000) {
            $sql = substr($sql, 0, -1);
            $sql = $sql .";";
            mysqli_query($conn, $sql);
            echo "Ran ".$counter. PHP_EOL;
            $sql = "INSERT INTO auctions (auc, item, buyout, quantity) VALUES ";
            $i = 0;
        }
    }

   if($i > 0){
      $sql = substr($sql, 0, -1);
      $sql = $sql .";";
      echo "Ran".$counter. PHP_EOL;
      mysqli_query($conn, $sql);
   }


   mysqli_query($conn, "DELETE FROM auctions WHERE buyout=0");


   echo "Update successful.". PHP_EOL;

   echo "Updating blood prices..." . PHP_EOL;
   bloodPrices();

   echo "Updating Market Values.". PHP_EOL;
   benchmarkMarketvalueCalculation();
//   system('pm2 restart bot', $output); //Restarts the discord bot to prevent caching issues. Replace 'bot' with the name of the apprunning in pm2
//   echo $output. PHP_EOL;

   exit();

}

?>
